angular
    .module('app', [
      'colorpicker.module',
      'ui.bootstrap.contextMenu',
      'dndLists',
      'templates'
    ])
    .config([
      '$rootScopeProvider',
      function ($rootScopeProvider) {
        $rootScopeProvider.digestTtl(1000);
      }])
      .factory('appService', function () {
        return {
          isShow: true
        }
      });
angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('select/index.html','<select ng-model="item.model">\n  <option value="1">1</option>\n  <option value="2">2</option>\n</select>');
$templateCache.put('stacked/index.html','<div dnd-list="item.children" class="stacked">\n  <tree\n      item="_item"\n      ng-repeat="_item in item.children"\n      dnd-moved="item.children.splice($index, 1)"\n      dnd-draggable="_item"\n      dnd-effect-allowed="move"\n  ></tree>\n</div>\n');
$templateCache.put('table/index.html','<div>djddjfdj</div>');
$templateCache.put('properties/adding-style/index.html','<div class="panel panel-success">\n  <div class="panel-heading">\n    <div class="row">\n      <div class="col-md-10">{{header}}</div>\n      <div class="col-md-2 text-right">\n        <button class="btn btn-success btn-xs" ng-click="addNew()">\n          <i class="glyphicon glyphicon-plus-sign"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class="panel-body">\n    <div class="row" ng-repeat="style in styles track by $index">\n      <div class="col-md-5">\n        <label>\n          <input class="form-control" ng-model="style.name" type="text"/>\n        </label>\n      </div>\n\n      <div class="col-md-4">\n        <div ng-if="checkColor(style.name)">\n          <input ng-if="!checkBackgroundImage(style)" class="form-control" colorpicker type="text" ng-model="style.value"/>\n\n          <div ng-if="checkBackgroundImage(style)">\n            <ui-select ng-model="style.value">\n              <ui-select-match placeholder="Search picture ">\n                <img ng-if="$select.selected.attributes.image.url" ng-src="{{util.loadUrl($select.selected.attributes.image.url)}}" height="30" width="30"/>\n                {{$select.selected.attributes.name}}\n              </ui-select-match>\n              <ui-select-choices repeat="picture in pictures | filter: $select.search">\n              <img ng-src="{{util.loadUrl(picture.attributes.image.url)}}" height="50px" width="50px"/> &nbsp;\n              <div ng-bind-html="picture.attributes.name| highlight: $select.search" style="display: inline"></div>\n              </ui-select-choices>\n            </ui-select>\n          </div>\n        </div>\n        <div ng-if="!checkColor(style.name)">\n          <input class="form-control" ng-model="style.value" type="text"/>\n        </div>\n      </div>\n      <div class="col-md-3">\n        <button class="btn btn-success btn-xs" ng-click="addNew($index)">\n          <i class="glyphicon glyphicon-plus-sign"></i>\n        </button>\n        <button class="btn btn-danger btn-xs" ng-click="remove($index)">\n          <i class="glyphicon glyphicon-trash"></i>\n        </button>\n      </div>\n    </div>\n\n  </div>\n</div>');
$templateCache.put('properties/adding-class/index.html','<div class="panel panel-info">\n  <div class="panel-heading">\n    <div class="row">\n      <div class="col-md-9">{{header}}</div>\n      <div class="col-md-3 text-right">\n        <button class="btn btn-success btn-xs" ng-click="addNew()">\n          <i class="glyphicon glyphicon-plus-sign"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class="panel-body">\n    <div class="row" ng-repeat="c in classes track by $index">\n      <div class="col-md-9">\n        <label>\n          <select class="form-control" ng-options="flex for flex in flexbox " ng-model="classes[$index]"></select>\n        </label>\n      </div>\n      <div class="col-md-3 text-right">\n        <button class="btn btn-success btn-xs" ng-click="addNew($index)">\n          <i class="glyphicon glyphicon-plus-sign"></i>\n        </button>\n        <button class="btn btn-danger btn-xs" ng-click="remove($index)">\n          <i class="glyphicon glyphicon-trash"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>');
$templateCache.put('properties/property-modify/index.html','<div class="group-style">\n  <div class="group-style" ng-repeat="(k, v) in $ctrl.selected.properties">\n    <adding-class classes="v.classes" header="class {{k}}"></adding-class>\n    <adding-style styles="v.styles" header="style {{k}}"></adding-style>\n  </div>\n</div>');}]);
angular
    .module('app')
    .controller("TreeController", ['$scope', '$rootScope', 'appService', function ($scope, $rootScope, appService) {

      var stacked = {
        model: "stacked",
        type: "stacked",
        children: []
      };


      var input = {
        model: "d",
        type: "input"
      };


      var select = {
        type: "select",
        model: "1"
      };


      var paragraph = {
        type: "paragraph",
        model: "1"
      };


      var table= {
        model: "table",
        type: "table",
        children: [
          {
            children:[angular.copy(stacked), angular.copy(stacked)]
          },
          {
            children:[angular.copy(stacked), angular.copy(stacked)]
          }
        ]
      };

      $scope.isShow = appService.isShow;
      $scope.templates = {
        input: angular.copy(input),
        select: angular.copy(select),
        paragraph: angular.copy(paragraph),
        stacked: angular.copy(stacked),
        table: angular.copy(table)
      };

      $scope.userList = [
        {name: "xxx", age:10},
        {name: "yyy", age:20},
        {name: "zzz", age:30},
        {name: "www", age:40}
      ];
      $scope.selected = {};
      $scope.models = node;

      $scope.show = function () {
        appService.isShow = $scope.isShow = !$scope.isShow;
        $rootScope.$broadcast('$re-compile');
      }

    }]);
/**
 * Created by ThanhQuangNgocTuong on 12/6/16.
 */
(function(){
  angular
      .module("app")
      .filter('toObject', [function(){
        return function(data){
          var newData = {};
          if(data){
            angular.forEach(data, function (a) {
              newData[a.name] = a.value;
            });
          }
          return newData;
        }
      }])
})();
/**
 * Created by GUMI-QUANG on 6/24/16.
 */
(function () {
  angular
      .module('app')
      .factory('Util',
          [function () {

              var service = {};

              service.arrayStyleToObject = function (arr) {
                console.log(arr);
                  var o = {};
                  _.each(arr, function(a){
                    o[a.name] = a.value;
                  });

                  return o;
              };


              return service;
            }
          ]
      );
})();
(function () {
  angular
      .module('app')
      .directive('inputComponent', [function () {
        return {
          scope: {
            item:"="
          },
          replace: true,
          template: '<input type="text" ng-model="item.model">'
        };
      }]);
})();
(function () {
  angular
      .module('app')
      .directive('ngBindModel', [
        '$compile',
        function ($compile) {
          return {
            restrict:"AC",

            link: function (scope, el, attr, tr) {
              el[0].removeAttribute('ng-bind-model');
              var stringModel = attr.ngBindModel;
              var tagName = el[0].nodeName.toLowerCase();
              var tagType = el[0].type ? el[0].type.toLowerCase() : "unknown";
              var index = attr.index ? attr.index : "i";
              var alias = attr.alias ? attr.alias : "item";
              var scopeModel = scope.$eval(stringModel);

              if (scopeModel !== undefined) {

                if (angular.isArray(scopeModel)) {
                  el[0].setAttribute('ng-repeat', "(" + index + "," + alias + ") in " + stringModel);

                } else {
                  if (tagName === "input" || tagName === "select" || tagName === "textarea") {

                    if (tagType === "checkbox" || tagType === "radio") {
                      el[0].setAttribute('ng-checked', scopeModel);
                    } else {
                      el[0].setAttribute('ng-model', scopeModel);
                    }
                  } else {
                    el[0].setAttribute('ng-bind-template', scopeModel);
                  }
                }
              } else {
                if (tagName === "input" || tagName === "select" || tagName === "textarea") {
                  el[0].setAttribute('value', stringModel);
                } else {
                  el[0].setAttribute('ng-bind-template', stringModel);
                }
              }
              $compile(el[0])(scope);
            }
          }
        }
      ]);
})();
(function () {
  angular
      .module('app')
      .directive('paragraphComponent', [function () {
        return {
          scope: {
            item:"="
          },
          replace: true,
          template: '<p>{{item.model}}</p>'
        };
      }]);
})();
(function () {
  angular
      .module('app')
      .directive('selectComponent', [function () {
        return {
          scope: {
            item:"="
          },
          replace: true,
          templateUrl: 'select/index.html'
        };
      }]);
})();
(function () {
  angular
      .module('app')
      .directive('stackedComponent', [function () {
        return {
          scope: {
            item:"="
          },
          replace: true,
          templateUrl: 'stacked/index.html'
        };
      }]);
})();
(function () {
  angular
      .module('app')
      .directive('tableComponent', [function () {
        return {
          scope: {
            item:"="
          },
          replace: true,
          templateUrl: 'table/index.html'
        };
      }]);
})();
(function () {
  angular
      .module('app')
      .directive('root', ['$compile', function ($compile) {
        return {
          scope: {
            item:"="
          },
          link: function (scope, element) {
            var triggerRelink = function() {
              var html = $compile('<tree item="item"></tree>')(scope);
              element.html(html);
            };

            triggerRelink();
            scope.$on('$re-compile', triggerRelink);
          }
        };
      }])
      .directive('tree', ['$compile', 'appService', function ($compile, appService) {
        return {
          scope: {
            item:"="
          },
          link: function (scope, element) {
            var triggerRelink = function() {
              var directive = '<' + scope.item.type + '-component item="item"/>';
              var html = $compile(directive)(scope);
              if(appService.isShow){
                element.html(html);
              }else{
                element.replaceWith(html);
              }
            };

            triggerRelink();
            scope.$on('$re-compile', triggerRelink);
          }
        };
      }]);
})();
/**
 * Created by quangtang on 5/30/17.
 */
(function () {
  angular
      .module("app")
      .directive("addingClass",
          [function () {
              return {
                restrict: "E",
                scope: {
                  classes: '=',
                  header:'@'
                },
                link: function ($scope, $element, $attr) {

                  $scope.flexbox = [
                    "flex_row",
                    "flex_row_reverse",
                    "flex_column",
                    "flex_column_reverse",
                    "flex_wrap",
                    "flex_wrap_reverse",
                    "flex_justify_content_end",
                    "flex_justify_content_center",
                    "flex_justify_content_space_around",
                    "flex_justify_content_space_between",
                    "flex_align_items_start",
                    "flex_align_items_end",
                    "flex_align_items_center",
                    "flex_align_items_baseline",
                    "flex_aligns_content_start",
                    "flex_aligns_content_end",
                    "flex_aligns_content_center",
                    "flex_aligns_content_space_between",
                    "flex_aligns_content_space_around",
                    "flex_align-self-start",
                    "flex_align-self-end",
                    "flex_align-self-center",
                    "flex_align-self-baseline",
                    "flex_align-self-stretch"
                  ];

                  $scope.remove = function (index) {
                    $scope.classes.splice(index, 1);
                  };

                  $scope.addNew = function (index) {
                    if(is.not.undefined(index)){
                      $scope.classes.splice(index + 1, 0, "flex_column");
                    }else{
                      $scope.classes.push("flex_column");
                    }
                  };

                },
                templateUrl: 'properties/adding-class/index.html'
              }
            }]);
})();
/**
 * Created by quangtang on 5/30/17.
 */
(function () {
  angular
      .module("app")
      .directive("addingStyle", [function () {
        return {
          restrict:"E",
          scope: {
            styles: '=',
            header:'@'
          },
          link: function($scope, $element, $attr) {

            $scope.remove = function (index) {
              $scope.styles.splice(index, 1);
            };

            $scope.addNew = function (index) {
              if(is.not.undefined(index)){
                $scope.styles.splice(index + 1, 0, {
                  name: "",
                  value: ""
                });
              }else{
                $scope.styles.push({
                  name: "",
                  value: ""
                });
              }
            };

            //Apply color picker to input if style name equal to color or background
            $scope.checkColor  = function (styleName) {
              var pattern = /\bcolor\b|\bbackground\b/;
              return pattern.test(styleName);
            };


            $scope.checkBackgroundImage = function (style, i) {
              var isBackgroundImage = style.name.indexOf("image") >= 0;
              if(isBackgroundImage){
                if(is.empty(style.value) || is.string(style.value)) {
                  style.value = {
                    attributes: {
                      image: {
                        url: ""
                      }
                    }
                  };
                }
              }else{
                if(is.object( style.name)){
                  style.value = "";
                }
              }

              return isBackgroundImage;
            };

          },
          templateUrl: 'properties/adding-style/index.html'
        }
      }]);
})();
/**
 * Created by quangtang on 5/30/17.
 */
(function () {
  angular
      .module("app")
      .component("propertiesComponent", {
        bindings:{
          selected: "="
        },
        templateUrl:"properties/property-modify/index.html"
      })
})();